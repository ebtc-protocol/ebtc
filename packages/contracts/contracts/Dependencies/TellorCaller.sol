// SPDX-License-Identifier: MIT

pragma solidity 0.8.17;

import "../Interfaces/ITellorCaller.sol";
import "./ITellor.sol";
import "./SafeMath.sol";

/*
 * This contract has a single external function that calls Tellor: getTellorCurrentValue().
 *
 * The function is called by the Liquity contract PriceFeed.sol. If any of its inner calls to Tellor revert,
 * this function will revert, and PriceFeed will catch the failure and handle it accordingly.
 *
 * The function comes from Tellor's own wrapper contract, 'UsingTellor.sol':
 * https://github.com/tellor-io/usingtellor/blob/master/contracts/UsingTellor.sol
 *
 */
contract TellorCaller is ITellorCaller {
    using SafeMath for uint256;

    ITellor public tellor;

    constructor(address _tellorMasterAddress) public {
        tellor = ITellor(_tellorMasterAddress);
    }

    /*
     * getTellorBufferValue(): fixed according to https://www.liquity.org/blog/tellor-issue-and-fix
     *
     * @dev Allows the user to get the latest value for the queryId specified
     * @param _queryId is the queryId to look up the value for, generated by https://tellor.io/queryidbuilder/
     * @param _bufferInSeconds a buffer time in sceonds when retrieving oracle values to allows time for bad values to be disputed
     * @return ifRetrieve true if it is able to retrieve a valid value
     * @return value the oracle report retrieved
     * @return _timestampRetrieved the value's timestamp
     */
    function getTellorBufferValue(
        bytes32 _queryId,
        uint256 _bufferInSeconds
    ) external view override returns (bool ifRetrieve, uint256 value, uint256 _timestampRetrieved) {
        require(_bufferInSeconds > 0, "!bufferTime");
        (bool _ifRetrieve, bytes memory _value, uint256 _timestampRetrieved) = tellor.getDataBefore(
            _queryId,
            block.timestamp - _bufferInSeconds
        );
        uint256 _val = abi.decode(_value, (uint256));
        if (_timestampRetrieved == 0 || _val == 0) {
            return (false, _val, _timestampRetrieved);
        } else {
            return (true, _val, _timestampRetrieved);
        }
    }
}
